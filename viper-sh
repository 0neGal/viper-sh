#!/bin/sh

VERSION="1.0.0"

ARGS="$@"
JSONPATH="$(jq -r .gamepath "$XDG_CONFIG_HOME/viper.json" 2> /dev/null)"
GAMEPATH="${GAMEPATH:-$JSONPATH}"

LATESTJSON=""

out() {
	echo "$ARGS" | grep -qe "--quiet" || {
		echo $@
	}
}

err() {
	echo "$ARGS" | grep -qe "--quiet" || {
		echo "err: $@" 1>&2
	}
}

verifypath() {
	[ "$GAMEPATH" = "" ] && {
		err "\$GAMEPATH not set, and or viper.json was not able to be read."
		exit 1
	}

	[ ! -d "$GAMEPATH" ] && {
		[ "$GAMEPATH" != "" ] && {
			err "'$GAMEPATH' does not exist!"
			exit 1
		}
	}
}

exclude() {
	EXCLUDE="
		ns_startup_args.txt
		ns_startup_args_dedi.txt
	"

	[ "$1" = "--revert" ] && {
		for i in $EXCLUDE; do
			mv "$GAMEPATH"/"$i.excluded" "$GAMEPATH"/"$i"
		done

		return
	}

	for i in $EXCLUDE; do
		mv "$GAMEPATH"/"$i" "$GAMEPATH"/"$i.excluded"
	done
}

getlatest() {
	LATESTJSON="$(curl --silent 'https://api.github.com/repos/R2Northstar/Northstar/releases/latest')"
	/bin/echo $LATESTJSON | jq .message | grep -q "API rate limit" && {
		err "You're currently rate limited!"
		return 1
	}
	
	return 0
}

latest() {
	[ "$LATESTJSON" = "" ] && getlatest

	case $1 in
		"get") getlatest;;
		"ver") /bin/echo "$LATESTJSON" | jq -r .tag_name;;
		"zip") /bin/echo "$LATESTJSON" | jq -r .assets[0].browser_download_url;;
	esac
}

func() {
for i in $@; do
	case $i in
		"--help")
cat <<EOF
options:
 --help
     shows this help message
 --version
     shows the version of ViperSH

 --setpath
     sets the path permanently in your viper.json
 --update
     updates Northstar to the latest version 
 --force
     if you're on the latest version this forcefully re-installs it

 --mods
     lists out the installed mods
 --findmods
     uses fzf to make it easy to install mods from Thunderstore
 --installmod
     when provided with a URL (--installmod=<url>) it assumes it's a zip
     containing a mod, and downloads it, then installs it
EOF
			;;
		"--version") echo "ViperSH v$VERSION" ;;
		"--setpath"|"--setpath="*)
			ARG="$(echo $i | sed 's/--setpath=//')"

			[ "$ARG" != "" ] && {
				CONFIG="${XDG_CONFIG_HOME:-$HOME/.config}"
				
				[ -f "$CONFIG/viper.json" ] && {
					JSON="$(jq ".gamepath = \"$ARG\"" "$CONFIG/viper.json")"
					echo $JSON > "$CONFIG/viper.json"
					exit
				}

				JSON="$(echo "{\"gamepath\": \"$ARG\"}" | jq)"
				echo $JSON > "$CONFIG/viper.json"

				exit
			}

			err "No valid URL given!"
			;;
		"--update")
			verifypath
			getlatest || exit 1

			cd "$GAMEPATH"

			[ "$(cat ns_version.txt 2> /dev/null)" = "$(latest ver)" ] && {
				echo "$@" | grep -qe "--force" || {
					out "Already on newest version!"
					exit 1
				}
			}
			
			ZIP="$(latest zip)"
			LOCALZIP="$(echo $ZIP | sed 's/.*\///g')"

			out "Downloading..."
			wget "$ZIP" > /dev/null

			exclude

			out "Extracting..."
			unzip -oqq "$LOCALZIP"
			rm "$LOCALZIP"

			exclude --revert

			latest ver > ns_version.txt
			out "Finished updating to: $(latest ver)"
			;;
		"--force") ;;
		"--daemon")
			verifypath
			while true; do
				getlatest || exit 1
				func --update && {
					out "Finished updating to: $(latest ver)"
				} || {
					out "No new version found."
				}

				sleep 5m
			done
			;;
		"--mods")
			verifypath

			MODPATH="$GAMEPATH/R2Northstar/mods"
			[ ! -d "$MODPATH" ] && {
				err "Mod folder missing"
				exit 1
			}

			MODS=""
			MODCOUNT="0"
			for i in "$MODPATH"/*; do
				[ -d "$i" ] && {
					[ -f "$i/mod.json" ] && {
						MODCOUNT="$(($MODCOUNT+1))"
						MOD="$(jq -r '[.Name, .Version] | @tsv' "$i/mod.json")" 2> /dev/null || {
							err "$(basename "$i") has an improperly formatted mod.json"
							MODS="  $MODS\n $(basename "$i") unknown"
							continue
						}

						MODS="  $MODS\n $(echo $MOD | awk '{print $1}') $(echo $MOD | awk '{print $2}')"
					}
				}
			done

			echo "Installed mods: $MODCOUNT $MODS"
			;;
		"--findmods")
			verifypath

			#PACKAGES="$(curl --silent https://northstar.thunderstore.io/api/v1/package/)"
			PACKAGES="$(cat ~/pkgs.json)"
			NAMES="$(/bin/echo $PACKAGES | jq '.[].name' -r)"
			ITERATOR="0"
			for i in $NAMES; do
				echo $ITERATOR $i
				ITERATOR="$(($ITERATOR+1))"
			done | fzf | awk '{ print $1 }' | {
				MOD="$(xargs)"
				/bin/echo $PACKAGES | jq -r ".[$MOD].name" | out "Installing: $(cat -)"
				/bin/echo $PACKAGES | jq -r ".[$MOD].versions[0].download_url" | func --installmod="$(cat -)"
			}

			;;
		"--installmod"|"--installmod="*)
			verifypath

			MOD="$(echo $i | sed "s/--installmod=//g")"

			cd "$GAMEPATH"
			rm tmp -rf

			echo "$MOD" | grep -Eq "^https://" && {
				mkdir -p tmp; cd tmp

				out "Downloading..."
				wget "$MOD" > /dev/null && {
					unzip -oqq *zip && {
						chmod 777 . -R

						[ -f "mods/mod.json" ] && {
							NAME="$(jq .Name mods/mod.json -r)"
							rm -rf "../R2Northstar/mods/$NAME"
							mv -f mods "../R2Northstar/mods/$NAME"
							cd ..

							out "Installed."
							exit
						}

						for i in mods/*/*; do
							echo $i | grep -Eq ".*/mod.json" && {
								rm -rf "../R2Northstar/$(dirname $i)"
								mv -f "$(dirname $i)" ../R2Northstar/mods
							}
						done
					}
				}


				cd ..
				rm tmp -rf

				out "Installed."
				exit
			}

			err "No valid URL given!"
			;;
		*)	err "Unknown argument, '$i'"; exit 1;;
	esac
done
}; func $@

[ -z "$@" ] && {
	err "Missing argument!"
	exit 1
}
